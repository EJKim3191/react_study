{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\React\\\\seasons\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude\n    }), err => this.setState({\n      errorMessage: err.message\n    }));\n  }\n\n  componentDidUpdate() {\n    console.log('My component was just Updated - it rerendered!');\n  }\n\n  render() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(SeasonDisplay, {\n        lat: this.state.lat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 5\n}, this), document.querySelector('#root'));","map":{"version":3,"sources":["C:/Workspace/React/seasons/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","Spinner","App","Component","state","lat","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","componentDidUpdate","console","log","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BC,KAD8B,GACtB;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,YAAY,EAAE;AAA3B,KADsB;AAAA;;AAG9BC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAER,MAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,KAAd,CADhB,EAEIC,GAAG,IAAI,KAAKH,QAAL,CAAc;AAAEP,MAAAA,YAAY,EAAEU,GAAG,CAACC;AAApB,KAAd,CAFX;AAIH;;AACDC,EAAAA,kBAAkB,GAAE;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,QAAG,KAAKjB,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA1C,EAA8C;AAC1C,0BAAO;AAAA,8BAAa,KAAKD,KAAL,CAAWE,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,QAAG,CAAC,KAAKF,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA1C,EAA8C;AAC1C,0BAAO,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAtB6B;;AAyBlCN,QAAQ,CAACsB,MAAT,eACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EAEIC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFJ","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends React.Component {\r\n    state = { lat: null, errorMessage: '' };\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => this.setState({ lat: position.coords.latitude }),\r\n            err => this.setState({ errorMessage: err.message})\r\n        );    \r\n    }\r\n    componentDidUpdate(){\r\n        console.log('My component was just Updated - it rerendered!')\r\n    }\r\n    render() {\r\n        if(this.state.errorMessage && !this.state.lat){\r\n            return <div>Error: {this.state.errorMessage}</div>;\r\n        }\r\n\r\n        if(!this.state.errorMessage && this.state.lat){\r\n            return <SeasonDisplay lat={this.state.lat} />\r\n        }\r\n\r\n        return <Spinner />;\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n    );"]},"metadata":{},"sourceType":"module"}